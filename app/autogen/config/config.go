package config

import (
	"fmt"
	"os"
	"path/filepath"

	"gopkg.in/yaml.v3"

	"github.com/Galdoba/devtools/configmanager"
)

const (
	appName = "autogen"
)

type configuration struct {
	app             string
	path            string
	isCustom        bool
	TableFile       string          `yaml:"Table Data File"`                           //TODO: use google api, this field shoud provide link to sheet [default : c:\Users\pemaltynov\.ffstuff\data\taskSpreadsheet.csv]
	InputDir        string          `yaml:"Input Directory"`                           // [default : //192.168.31.4/buffer/IN/]
	ProgressDir     string          `yaml:"Working Directory"`                         // [default : //192.168.31.4/buffer/IN/_IN_PROGRESS/]
	DoneDir         string          `yaml:"Done Directory"`                            // [default : //192.168.31.4/buffer/IN/_DONE/]
	ArchiveRoot     string          `yaml:"Archive Root Directory"`                    // [default : //192.168.31.4/root/IN/]
	OutputRoot      string          `yaml:"Output Root Directory"`                     // [default : //nas/ROOT/EDIT/]
	NotificationDir string          `yaml:"Notifications Storage Directory,omitempty"` //TODO: telegram bot, windows notifier [default : //192.168.31.4/buffer/IN/notifications/]
	JobCycle        int             `yaml:"Repeat Atempt Every"`                       //Seconds [default : 20]
	Notify          map[string]bool `yaml:"Generate Notification Types,omitempty"`     //Types of notifications to generate [tg : false][windows_notify : false]
	MarkWarning     bool            `yaml:"Generate Warning Marker,omitempty"`         // [default : true]
	MarkerText      string          `yaml:"Warning Marker Text,omitempty"`             // [default : _AG]
	ReadyFile       bool            `yaml:"Generate Ready File,omitempty"`             // [default : true]
	ScanInterlace   bool            `yaml:"Scan Interlace Before Processing"`          // [default : true]
	ScanLoudness    bool            `yaml:"Scan Loudness Before Processing"`           // [default : true]
	ScanErrors      bool            `yaml:"Scan ffmpeg Read Errors"`                   // [default : true]
	TableObsolence  int             `yaml:"Maximem Table Data Age"`                    //Seconds [default : 300]
	TableUpdate     bool            `yaml:"Table Data Auto Update"`                    // [default : true]
	TicketStorage   string          `yaml:"Ticket Storage Directory"`                  //where tickets are stored [default : //192.168.31.4/buffer/IN/ScanData/tickets/]
}

type ConfigFile interface {
	Save() error
	SaveAs(string) error
	SetDefault() error
	Path() string
	AppName() string
	IsCustom() bool
}

type Config interface {
	ConfigFile
	TableDataFile() string
	InputDirectory() string
	WorkingDirectory() string
	DoneDirectory() string
	ArchiveRootDirectory() string
	OutputRootDirectory() string
	NotificationsStorageDirectory() string
	RepeatAtemptEvery() int
	GenerateNotificationTypes() map[string]bool
	GenerateWarningMarker() bool
	WarningMarkerText() string
	GenerateReadyFile() bool
	ScanInterlaceBeforeProcessing() bool
	ScanLoudnessBeforeProcessing() bool
	ScanFfmpegReadErrors() bool
	MaximemTableDataAge() int
	TableDataAutoUpdate() bool
	TicketStorageDirectory() string
}

////////////NEW-SAVE-LOAD////////////
//New - autogenerated constructor of config file
func New() Config {
	cfg := configuration{}
	cfg.path = configmanager.DefaultConfigDir(appName) + "config.yaml"
	cfg.app = appName
	cfg.Notify = make(map[string]bool)
	return &cfg
}

//Save - autogenerated constructor of config file
func (cfg *configuration) Save() error {
	data := []byte(header())
	bt, err := yaml.Marshal(cfg)
	if err != nil {
		return fmt.Errorf("can't marshal config: %v", err.Error())
	}
	if err := os.MkdirAll(filepath.Dir(cfg.path), 0777); err != nil {
		return fmt.Errorf("can't create directory")
	}
	f, err := os.OpenFile(cfg.path, os.O_CREATE|os.O_WRONLY, 0777)
	if err != nil {
		return fmt.Errorf("can't open file: %v", err.Error())
	}
	defer f.Close()
	f.Truncate(0)
	data = append(data, bt...)
	_, err = f.Write(data)
	if err != nil {
		return fmt.Errorf("can't write file: %v", err.Error())
	}
	return nil
}

//SaveAs - autogenerated saver of alternative config file
func (cfg *configuration) SaveAs(path string) error {
	cfg.path = path
	cfg.isCustom = true
	return cfg.Save()
}

//Load - Load default config
func Load() (Config, error) {
	path := stdConfigPath()
	cfg, err := loadConfig(path)
	if err != nil {
		return nil, fmt.Errorf("can't load default config: %v", err.Error())
	}
	cfg.isCustom = true
	return cfg, nil
}

//LoadCustom - Loader custom config
func LoadCustom(path string) (Config, error) {
	cfg, err := loadConfig(path)
	if err != nil {
		return nil, fmt.Errorf("can't load custom config: %v", err.Error())
	}
	cfg.isCustom = true
	return cfg, nil
}

//loadConfig - autogenerated loader config file
func loadConfig(path string) (*configuration, error) {
	bt, err := os.ReadFile(path)
	if err != nil {
		return nil, fmt.Errorf("%v", err.Error())
	}
	cfg := &configuration{}
	err = yaml.Unmarshal(bt, cfg)
	if err != nil {
		return nil, fmt.Errorf("%v", err.Error())
	}
	return cfg, nil
}

////////////HELPERS////////////

//Path - return filepath of current config
func (cfg *configuration) Path() string {
	return cfg.path
}

//IsCustom - return true if config is custom
func (cfg *configuration) IsCustom() bool {
	return cfg.isCustom
}

//AppName - return true if config is custom
func (cfg *configuration) AppName() string {
	return cfg.app
}

func stdConfigDir() string {
	path, err := os.UserHomeDir()
	if err != nil {
		panic(err.Error())
	}
	sep := string(filepath.Separator)
	path += sep
	return path + ".config" + sep + appName + sep
}

func stdConfigPath() string {
	return stdConfigDir() + "config.yaml"
}

////////////GETTERS////////////

//GetTableDataFile - autogenerated getter for 'Table Data File' option of config file
func (cfg *configuration) TableDataFile() string {
	return cfg.TableFile
}

//GetInputDirectory - autogenerated getter for 'Input Directory' option of config file
func (cfg *configuration) InputDirectory() string {
	return cfg.InputDir
}

//GetWorkingDirectory - autogenerated getter for 'Working Directory' option of config file
func (cfg *configuration) WorkingDirectory() string {
	return cfg.ProgressDir
}

//GetDoneDirectory - autogenerated getter for 'Done Directory' option of config file
func (cfg *configuration) DoneDirectory() string {
	return cfg.DoneDir
}

//GetArchiveRootDirectory - autogenerated getter for 'Archive Root Directory' option of config file
func (cfg *configuration) ArchiveRootDirectory() string {
	return cfg.ArchiveRoot
}

//GetOutputRootDirectory - autogenerated getter for 'Output Root Directory' option of config file
func (cfg *configuration) OutputRootDirectory() string {
	return cfg.OutputRoot
}

//GetNotificationsStorageDirectory - autogenerated getter for 'Notifications Storage Directory' option of config file
func (cfg *configuration) NotificationsStorageDirectory() string {
	return cfg.NotificationDir
}

//GetRepeatAtemptEvery - autogenerated getter for 'Repeat Atempt Every' option of config file
func (cfg *configuration) RepeatAtemptEvery() int {
	return cfg.JobCycle
}

//GetGenerateNotificationTypes - autogenerated getter for 'Generate Notification Types' option of config file
func (cfg *configuration) GenerateNotificationTypes() map[string]bool {
	return cfg.Notify
}

//GetGenerateWarningMarker - autogenerated getter for 'Generate Warning Marker' option of config file
func (cfg *configuration) GenerateWarningMarker() bool {
	return cfg.MarkWarning
}

//GetWarningMarkerText - autogenerated getter for 'Warning Marker Text' option of config file
func (cfg *configuration) WarningMarkerText() string {
	return cfg.MarkerText
}

//GetGenerateReadyFile - autogenerated getter for 'Generate Ready File' option of config file
func (cfg *configuration) GenerateReadyFile() bool {
	return cfg.ReadyFile
}

//GetScanInterlaceBeforeProcessing - autogenerated getter for 'Scan Interlace Before Processing' option of config file
func (cfg *configuration) ScanInterlaceBeforeProcessing() bool {
	return cfg.ScanInterlace
}

//GetScanLoudnessBeforeProcessing - autogenerated getter for 'Scan Loudness Before Processing' option of config file
func (cfg *configuration) ScanLoudnessBeforeProcessing() bool {
	return cfg.ScanLoudness
}

//GetScanFfmpegReadErrors - autogenerated getter for 'Scan ffmpeg Read Errors' option of config file
func (cfg *configuration) ScanFfmpegReadErrors() bool {
	return cfg.ScanErrors
}

//GetMaximemTableDataAge - autogenerated getter for 'Maximem Table Data Age' option of config file
func (cfg *configuration) MaximemTableDataAge() int {
	return cfg.TableObsolence
}

//GetTableDataAutoUpdate - autogenerated getter for 'Table Data Auto Update' option of config file
func (cfg *configuration) TableDataAutoUpdate() bool {
	return cfg.TableUpdate
}

//GetTicketStorageDirectory - autogenerated getter for 'Ticket Storage Directory' option of config file
func (cfg *configuration) TicketStorageDirectory() string {
	return cfg.TicketStorage
}

func (cfg *configuration) SetDefault() error {
	cfg.TableFile = `c:\Users\pemaltynov\.ffstuff\data\taskSpreadsheet.csv`
	cfg.InputDir = "//192.168.31.4/buffer/IN/"
	cfg.ProgressDir = "//192.168.31.4/buffer/IN/_IN_PROGRESS/"
	cfg.DoneDir = "//192.168.31.4/buffer/IN/_DONE/"
	cfg.ArchiveRoot = "//192.168.31.4/root/IN/"
	cfg.OutputRoot = "//nas/ROOT/EDIT/"
	cfg.NotificationDir = "//192.168.31.4/buffer/IN/notifications/"
	cfg.JobCycle = 20
	cfg.Notify["tg"] = false
	cfg.Notify["windows_notify"] = false
	cfg.MarkWarning = true
	cfg.MarkerText = "_AG"
	cfg.ReadyFile = true
	cfg.ScanInterlace = true
	cfg.ScanLoudness = true
	cfg.ScanErrors = true
	cfg.TableObsolence = 300
	cfg.TableUpdate = true
	cfg.TicketStorage = "//192.168.31.4/buffer/IN/ScanData/tickets/"
	return cfg.Save()
}

func header() string {
	hdr := ""
	hdr += `################################################################################` + "\n"
	hdr += `#                 This file was generated by configbuilder app                 #` + "\n"
	hdr += `#                     Check formatting rules before editing                    #` + "\n"
	hdr += `#                 https://docs.fileformat.com/programming/yaml/                #` + "\n"
	hdr += `################################################################################` + "\n"
	hdr += `# expected location: C:\Users\pemaltynov\.config\autogen\config.yaml` + "\n"
	hdr += `# app name         : autogen` + "\n"
	hdr += `` + "\n"
	return hdr
}
