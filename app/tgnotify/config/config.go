package config

import (
	"fmt"
	"os"
	"path/filepath"

	"encoding/json"

	"github.com/Galdoba/devtools/configmanager"
)

const (
	appName = "tgnotify"
)

type configuration struct {
	app      string
	path     string
	isCustom bool
	Token    string            `json:"ApiToken"`      //telegram bot secret token
	ChatData map[string]string `json:"Chat Channels"` //key => url_for_chat
}

type ConfigFile interface {
	Save() error
	SaveAs(string) error
	SetDefault() error
	Path() string
	AppName() string
	IsCustom() bool
}

type Config interface {
	ConfigFile
	ApiToken() string
	ChatChannels() map[string]string
}

// //////////NEW-SAVE-LOAD////////////
// New - autogenerated constructor of config file
func New() Config {
	cfg := configuration{}
	cfg.path = configmanager.DefaultConfigDir(appName) + "config.json"
	cfg.app = appName
	cfg.ChatData = make(map[string]string)
	return &cfg
}

// Save - autogenerated constructor of config file
func (cfg *configuration) Save() error {
	data := []byte(header())
	bt, err := json.MarshalIndent(cfg, "", "  ")
	if err != nil {
		return fmt.Errorf("can't marshal config: %v", err.Error())
	}
	if err := os.MkdirAll(filepath.Dir(cfg.path), 0777); err != nil {
		return fmt.Errorf("can't create directory")
	}
	f, err := os.OpenFile(cfg.path, os.O_CREATE|os.O_WRONLY, 0777)
	if err != nil {
		return fmt.Errorf("can't open file: %v", err.Error())
	}
	defer f.Close()
	f.Truncate(0)
	data = append(data, bt...)
	_, err = f.Write(data)
	if err != nil {
		return fmt.Errorf("can't write file: %v", err.Error())
	}
	return nil
}

// SaveAs - autogenerated saver of alternative config file
func (cfg *configuration) SaveAs(path string) error {
	cfg.path = path
	cfg.isCustom = true
	return cfg.Save()
}

// Load - Load default config
func Load() (Config, error) {
	path := stdConfigPath()
	cfg, err := loadConfig(path)
	if err != nil {
		return nil, fmt.Errorf("can't load default config: %v", err.Error())
	}
	cfg.isCustom = true
	return cfg, nil
}

// LoadCustom - Loader custom config
func LoadCustom(path string) (Config, error) {
	cfg, err := loadConfig(path)
	if err != nil {
		return nil, fmt.Errorf("can't load custom config: %v", err.Error())
	}
	cfg.isCustom = true
	return cfg, nil
}

// loadConfig - autogenerated loader config file
func loadConfig(path string) (*configuration, error) {
	bt, err := os.ReadFile(path)
	if err != nil {
		return nil, fmt.Errorf("%v", err.Error())
	}
	cfg := &configuration{}
	err = json.Unmarshal(bt, cfg)
	if err != nil {
		return nil, fmt.Errorf("%v", err.Error())
	}
	return cfg, nil
}

////////////HELPERS////////////

// Path - return filepath of current config
func (cfg *configuration) Path() string {
	return cfg.path
}

// IsCustom - return true if config is custom
func (cfg *configuration) IsCustom() bool {
	return cfg.isCustom
}

// AppName - return true if config is custom
func (cfg *configuration) AppName() string {
	return cfg.app
}

func stdConfigDir() string {
	path, err := os.UserHomeDir()
	if err != nil {
		panic(err.Error())
	}
	sep := string(filepath.Separator)
	path += sep
	return path + ".config" + sep + appName + sep
}

func stdConfigPath() string {
	return stdConfigDir() + "config.json"
}

////////////GETTERS////////////

// GetApiToken - autogenerated getter for 'ApiToken' option of config file
func (cfg *configuration) ApiToken() string {
	return cfg.Token
}

// GetChatChannels - autogenerated getter for 'Chat Channels' option of config file
func (cfg *configuration) ChatChannels() map[string]string {
	return cfg.ChatData
}

func (cfg *configuration) SetDefault() error {
	return cfg.Save()
}

func header() string {
	hdr := ""
	hdr += `################################################################################` + "\n"
	hdr += `#                 This file was generated by configbuilder app                 #` + "\n"
	hdr += `#                     Check formatting rules before editing                    #` + "\n"
	hdr += `#      https://www.freecodecamp.org/news/what-is-json-a-json-file-example/     #` + "\n"
	hdr += `################################################################################` + "\n"
	hdr += `# expected location: C:\Users\Admin\.config\tgnotify\config.json` + "\n"
	hdr += `# app name         : tgnotify` + "\n"
	hdr += `` + "\n"
	return hdr
}
