package main

import (
	"encoding/json"
	"fmt"
	"os"
	"strings"

	"github.com/Galdoba/devtools/gpath"
	"github.com/gookit/color"
)

func listPresets() ([]string, error) {
	fullList, err := os.ReadDir(gpath.StdPath("", []string{".config", programName, "presets"}...))
	if err != nil {
		return nil, err
	}
	list := []string{}
	for _, found := range fullList {
		if strings.HasPrefix(found.Name(), "preset_") && strings.HasSuffix(found.Name(), ".json") {
			n := strings.TrimPrefix(found.Name(), "preset_")
			n = strings.TrimSuffix(n, ".json")
			list = append(list, n)
		}
	}
	return list, nil
}

func loadPreset(name string) (*preset, error) {
	list, err := listPresets()
	if err != nil {
		return nil, err
	}
	found := false
	for _, nameL := range list {
		if nameL == name {
			found = true
		}
	}
	if !found {
		return nil, fmt.Errorf("can't find requested preset [%v]", name)
	}
	pr := &preset{}
	path := presetExpectedPath(name)
	bt, err := os.ReadFile(path)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal(bt, pr)
	if err != nil {
		fmt.Println(err.Error())
		panic(9)
	}
	println("preset loaded:", name)
	return pr, nil
}

func createDefaultPreset() error {
	//path := presetDir + "preset_Default.json"
	// f, err := os.OpenFile(path, os.O_CREATE|os.O_WRONLY, 0777)
	// if err != nil {
	// 	return fmt.Errorf("can't create default preset: %v", err.Error())
	// }
	// defer f.Close()
	defaultKeyComentMap := make(map[string]string)
	defaultKeyComentMap["A"] = "Название"
	defaultKeyComentMap["B"] = "Путь"
	defaultKeyComentMap["C"] = "Постер"
	defaultKeyComentMap["D"] = "Трейлер"
	defaultKeyComentMap["E"] = "Коментарии"
	columns := []*ColumnData{}
	for _, key := range []string{"A", "B", "C", "D", "E"} {
		columns = append(columns, &ColumnData{
			Key:     key,
			Comment: defaultKeyComentMap[key],
		})
	}

	pr, err := newPreset("Default", columns)
	if err != nil {
		return err
	}
	README := "===THIS IS AUTOGENERATED FILE===\n"
	README += "Custom Columns Fields Are:\n"
	README += "'Key'`                        -- string   -- column key\n"
	README += "'Comment',omniempty`          -- string   -- user comment\n"
	README += "'Is Hidden',omniempty`        -- bool     -- hide column\n"
	README += "'Allow Brake',omniempty`      -- bool     -- break text if exeed Max Width (if FALSE output will be trimmed)\n"
	README += "'Color Rule',omniempty`       -- string   -- how program will choose colors\n"
	README += "'Max Width',omniempty`        -- int      -- max width brefore break or trim (0=infinity=default value) \n"
	README += "'Outsource Script',omniempty` -- string   -- if set, program will pass cell text to this script as argument and print result as output \n"
	README += "'Pre Arguments',omniempty`    -- []string -- if set, program will pass theese keys/arguments BEFORE cell text\n"
	README += "'Post Arguments',omniempty`   -- []string -- if set, program will pass theese keys/arguments AFTER cell text"
	f2, err := os.OpenFile(presetDir+"README.txt", os.O_CREATE|os.O_WRONLY, 0777)
	f2.Write([]byte(README))
	f2.Close()
	bt, err := json.MarshalIndent(pr, "", "  ")
	if err != nil {
		return fmt.Errorf("can't marshal default preset: %v", err.Error())
	}
	f, err := os.OpenFile(pr.path, os.O_CREATE|os.O_WRONLY, 0777)
	if err != nil {
		return fmt.Errorf("can't open default preset: %v", err.Error())
	}
	defer f.Close()
	_, err = f.Write(bt)
	if err != nil {
		return fmt.Errorf("can't write default preset: %v", err.Error())
	}

	return nil
}

func SetColor(colorVal string) *color.Style256 {
	switch colorVal {
	default:
		return color.S256(15, 0)
	}
}

type preset struct {
	Name         string              `json:"Name"`
	ColPositions map[int]*ColumnData `json:"Columns"`
	path         string
}

func newPreset(name string, colDat []*ColumnData) (*preset, error) {
	pr := preset{}
	pr.Name = name
	pr.path = presetExpectedPath(name)
	pr.ColPositions = make(map[int]*ColumnData)
	for i, col := range colDat {
		if err := col.Evaluate(); err != nil {
			return nil, fmt.Errorf("can't create new preset: %v", err.Error())
		}
		pr.ColPositions[i] = col
	}
	return &pr, nil
}

func presetExpectedPath(name string) string {
	return presetDir + "preset_" + name + ".json"
}
